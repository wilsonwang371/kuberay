apiVersion: ray.io/v1alpha1
kind: RayCluster
metadata:
  labels:
    controller-tools.k8s.io: "2.0.0.dev0"
    # An unique identifier for the head node and workers of this cluster.
  name: raycluster-gcs-ha
spec:
  rayVersion: 'nightly' # should match the Ray version in the image of the containers
  ######################headGroupSpecs#################################
  # head group template and specs, (perhaps 'group' is not needed in the name)
  headGroupSpec:
    # Kubernetes Service Type, valid values are 'ClusterIP', 'NodePort' and 'LoadBalancer'
    serviceType: ClusterIP
    # the pod replicas in this group typed head (assuming there could be more than 1 in the future)
    replicas: 2
    # logical group name, for this called head-group, also can be functional
    # pod type head or worker
    # rayNodeType: head # Not needed since it is under the headgroup
    # the following params are used to complete the ray start: ray start --head --block --redis-port=6379 ...
    rayStartParams:
      port: '6379' # should match headService targetPort
      #include_webui: 'true'
      redis-password: 'LetMeInRay'
      # webui_host: "10.1.2.60"
      dashboard-host: '0.0.0.0'
      num-cpus: '1' # can be auto-completed from the limits
      node-ip-address: $MY_POD_IP # auto-completed as the head pod IP
      block: 'true'
      lite-head: 'true'
      restart-on-failure: 'true'
      gcs-leader-election: 'true'
    #pod template
    template:
      metadata:
        labels:
          # custom labels. NOTE: do not define custom labels start with `raycluster.`, they may be used in controller.
          # Refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
          rayCluster: raycluster-gcs-ha # will be injected if missing
          rayNodeType: head # will be injected if missing, must be head or wroker
          groupName: headgroup # will be injected if missing
        # annotations for pod
        annotations:
          key: value
      spec:
        containers:
        - name: ray-head
          image: rayproject/ray:nightly
          #image: bonsaidev.azurecr.io/bonsai/lazer-0-9-0-cpu:dev
          env:
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          ports:
          - containerPort: 6379
            name: redis
          - containerPort: 8265 # Ray dashboard
            name: dashboard
          - containerPort: 10001
            name: client
  workerGroupSpecs:
    # the pod replicas in this group typed worker
    - replicas: 2
      minReplicas: 0
      maxReplicas: 10
      # logical group name, for this called small-group, also can be functional
      groupName: small-group
      # if worker pods need to be added, we can simply increment the replicas
      # if worker pods need to be removed, we decrement the replicas, and populate the podsToDelete list
      # the operator will remove pods from the list until the number of replicas is satisfied
      # when a pod is confirmed to be deleted, its name will be removed from the list below
      #    scaleStrategy:
      #      workersToDelete:

      # the following params are used to complete the ray start: ray start --block --node-ip-address= ...
      rayStartParams:
        object-manager-port: '12345'
        node-manager-port: '12346'
        redis-password: 'LetMeInRay'
        node-ip-address: $MY_POD_IP
        block: 'true'
      #pod template
      template:
        metadata:
          labels:
            rayCluster: raycluster-gcs-ha # will be injected if missing
            rayNodeType: worker # will be injected if missing
            groupName: workergroup # will be injected if missing
          # annotations for pod
          annotations:
            key: value
        spec:
          initContainers: # to avoid worker crashing before head service is created
            # the env var $RAY_IP is set by the operator if missing, with the value of the head service name
            - name: init-myservice
              image: busybox:1.28
              # Change the cluster postfix if you don't have a default setting
              command: [ 'sh', '-c', "until nslookup $RAY_IP.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done" ]
          containers:
            - name: ray-worker # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
              image: rayproject/ray:nightly
              # environment variables to set in the container.Optional.
              # Refer to https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
              env:
                - name: TYPE
                  value: "worker"
                - name: RAY_DISABLE_DOCKER_CPU_WARNING
                  value: "1"
                - name: CPU_REQUEST
                  valueFrom:
                    resourceFieldRef:
                      containerName: ray-worker
                      resource: requests.cpu
                - name: MY_POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: MY_POD_IP
                  valueFrom:
                    fieldRef:
                      fieldPath: status.podIP
              ports:
                - containerPort: 80
              # use volumeMounts.Optional.
              # Refer to https://kubernetes.io/docs/concepts/storage/volumes/
              volumeMounts:
                - mountPath: /var/log
                  name: log-volume
              resources:
                limits:
                  cpu: "1"
                requests:
                  cpu: "200m"
          # use volumes
          # Refer to https://kubernetes.io/docs/concepts/storage/volumes/
          volumes:
            - name: log-volume
              emptyDir: { }
