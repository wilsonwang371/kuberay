name: Go-build-and-test

on:
  push:
    branches:
    - master
  pull_request:
    branches: [ master ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.17.x
      uses: actions/setup-go@v2
      with:
        # Use the same go version with build job
        go-version: '1.17'

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      with:
        # When checking out the repository that
        # triggered a workflow, this defaults to the reference or SHA for that event.
        # Default value should work for both pull_request and merge(push) event.
        ref: ${{github.event.pull_request.head.sha}}

    - name: Run gofmt
      uses: Jerome1337/gofmt-action@v1.0.4
      with:
        gofmt-path: 'apiserver cli ray-operator'
        gofmt-flags: '-l -d -s'

    - name: Install goimports
      run: go get golang.org/x/tools/cmd/goimports

    - name: Run goimports
      run: test -z "$(set -o pipefail && $(go env GOPATH)/bin/goimports -l apiserver/ ray-operator/ cli/ | tee goimports.out)" || { cat goimports.out && exit 1; }

    - name: Open this to see how to fix goimports if it fails
      run: |
        echo "Run command 'goimports -w apiserver/ ray-operator/ cli/' to correct your code format."
        echo "Proposed format changes:"
        $(go env GOPATH)/bin/goimports -d apiserver/ ray-operator/ cli/
      if: failure()

    - name: Run linter against ray operator
      uses: golangci/golangci-lint-action@v2
      with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: v1.29

          # Optional: working directory, useful for monorepos
          working-directory: ./ray-operator

          # Optional: golangci-lint command line arguments.
          # args: --issues-exit-code=0
          args: --timeout=3m

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true then the action will use pre-installed Go.
          skip-go-installation: true

          # Optional: if set to true then the action don't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

    - name: Run linter against apiserver
      uses: golangci/golangci-lint-action@v2
      with:
        version: v1.29
        working-directory: ./apiserver
        args: --timeout=3m
        skip-go-installation: true

    - name: Run linter against cli
      uses: golangci/golangci-lint-action@v2
      with:
        version: v1.29
        working-directory: ./cli
        args: --timeout=3m
        skip-go-installation: true
  build:
    env:
      working-directory: ./ray-operator
      cli-working-directory: ./cli
      apiserver-working-directory: ./apiserver
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.17.x
      uses: actions/setup-go@v2
      with:
        go-version: '1.17'

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      with:
        # When checking out the repository that
        # triggered a workflow, this defaults to the reference or SHA for that event.
        # Default value should work for both pull_request and merge(push) event.
        ref: ${{github.event.pull_request.head.sha}}

    - name: list directories
      working-directory: ${{env.working-directory}}
      run: ls -R

    - name: install kubebuilder
      run: |
        wget https://github.com/kubernetes-sigs/kubebuilder/releases/download/v3.0.0/kubebuilder_$(go env GOOS)_$(go env GOARCH)
        sudo mv kubebuilder_$(go env GOOS)_$(go env GOARCH) /usr/local/bin/kubebuilder

    - name: Get revision SHA
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

    - name: Get dependencies
      working-directory: ${{env.working-directory}}
      run: go mod download

    - name: Build
      run: make build
      working-directory: ${{env.working-directory}}

    - name: Test
      run: make test
      working-directory: ${{env.working-directory}}

    - name: Set up Docker
      uses: docker-practice/actions-setup-docker@master

    - name: Build Docker Image - Operator
      run: IMG=kuberay/operator:${{ steps.vars.outputs.sha_short }} make docker-image
      working-directory: ${{env.working-directory}}

    - name: Build Docker Image - Apiserver
      run: docker build -t kuberay/apiserver:${{ steps.vars.outputs.sha_short }} -f apiserver/Dockerfile .

    - name: Run compatibility test
      # compatibility test depends on operator & apiserver images built in previous steps.
      run: |
        pushd manifests/base/
        kustomize edit set image kuberay/operator=kuberay/operator:${{ steps.vars.outputs.sha_short }}
        kustomize edit set image kuberay/apiserver=kuberay/apiserver:${{ steps.vars.outputs.sha_short }}
        popd
        for i in "1.8.0" "1.9.0" "1.10.0"
        do
          echo "Using Ray image $i"
          RAY_VERSION=$i python ./tests/compatibility-test.py
        done

    - name: Log in to Docker Hub
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: ${{ github.ref == 'refs/heads/master' }}

    - name: Push to DockerHub
      run: |
        docker push kuberay/operator:${{ steps.vars.outputs.sha_short }};
        docker image tag kuberay/operator:${{ steps.vars.outputs.sha_short }} kuberay/operator:nightly;
        docker push kuberay/operator:nightly
        docker image tag kuberay/operator:${{ steps.vars.outputs.sha_short }} kuberay/operator:nightly;
        docker push kuberay/apiserver:${{ steps.vars.outputs.sha_short }};
        docker image tag kuberay/apiserver:${{ steps.vars.outputs.sha_short }} kuberay/apiserver:nightly;
        docker push kuberay/apiserver:nightly

      working-directory: ${{env.working-directory}}
      if: ${{ github.ref == 'refs/heads/master' }}

    - name: Build CLI
      run: go build -o kuberay -a main.go
      working-directory: ${{env.cli-working-directory}}

